{
  "compilerOptions": {
    /* ------------------------------------------------------------------------------------------ */  
    /* --------------------------------------Compilation 编译------------------------------------ */  
    /* ------------------------------------------------------------------------------------------ */  
    //OK
    "target": "ESNext", // 指定编译生成的目标 JavaScript 版本，ESNext表示生成最新的 ECMAScript 版本代码
    //OK
    "module": "ESNext", // 指定生成的模块系统为 ESNext（如 ESM）
    //OK
    "lib": ["DOM", "DOM.Iterable", "ESNext"], // 指定要包含在编译中基础库声明文件的列表
    //NG "skipLibCheck": true,
    "skipLibCheck": false, // 跳过第三方库声明文件的类型检查，可以显著加快编译速度，但可能隐藏一些类型问题
    "useDefineForClassFields": true, // ES2022 引入的新标准，Object.defineProperty 来定义类字段，设置为 true，TypeScript 会生成符合 ES2022标准的代码
    "allowJs": false, // 允许 TypeScript 编译器编译 .js 文件（通常只编译 .ts/.tsx，但在渐进迁移或混合项目时会用到）
    //OK
    "isolatedModules": true, // 启用隔离模块，保证每个文件都可以单独编译，避免跨文件的隐式依赖
    "jsx": "preserve", // 指定 JSX 代码如何被处理："preserve" 表示保留 JSX 语法到输出，通常供后续的其他工具进行处理
    //OK
    "esModuleInterop": true,     // 启用 ES 模块的互操作性，以兼容 commonjs 等不同模块系统的导入/导出方式
    //OK
    "resolveJsonModule": true, // 允许在 TypeScript 中导入 JSON 文件（需要 JSON 模块声明）
    "paths": { "@/*": ["./*"] }, // 设置路径别名, "@/xxx" 会被解析为当前根目录下 "./xxx"
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.app.tsbuildinfo",      // 指定存储TypeScript构建信息的文件路径
    //OK
    "declaration": true, //编译器将在编译过程中生成对应的 .d.ts 声明文件
    //OK
    "declarationMap": true, //编译器将在生成的声明文件旁边生成 .d.ts.map 映射文件
    //OK
    "noUncheckedIndexedAccess": true, //强制开发者处理可能的 undefined 情况，使代码更具可读性和可维护性。
    /* ------------------------------------------------------------------------------------------ */  
    /* ---------------------------------------Bundler 打包模式------------------------------------ */  
    /* ------------------------------------------------------------------------------------------ */  
    "noEmit": true, // 设置是否生成编译输出文件：当值为 true 时，编译器只进行类型检查而不输出文件，输出文件交给打包工具处理
    //NG "moduleResolution": "NodeNext",
    "moduleResolution": "bundler", // 设置模块解析策略，'bundler'通常在使用打包工具（Webpack、Rollup、Vite 等）时会用
    //OK
    "moduleDetection": "force",  // 强制将所有文件作为模块处理
    // NG "incremental": false,   
    "incremental": true,    // 启用增量编译，会在下次编译时加快编译速度（会生成 .tsbuildinfo 文件）
    "allowImportingTsExtensions": true, //在导入语句中显式指定 .ts 或 .tsx 扩展名，以确保构建工具正确处理文件。

    /* ------------------------------------------------------------------------------------------ */  
    /* ---------------------------------------Linting 代码检查------------------------------------ */  
    /* ------------------------------------------------------------------------------------------ */  
    //OK
    "strict": true, // 启用所有严格类型检查选项的总开关，比如 strictNullChecks、noImplicitAny 等
    "noUnusedLocals": true,  // 不允许存在未使用的局部变量
    "noUnusedParameters": true,  // 不允许存在未使用的函数参数
    "noFallthroughCasesInSwitch": true,  // 防止在switch语句中存在fallthrough情况
    "noUncheckedSideEffectImports": true,  // 防止导入可能导致副作用的模块

    /* ------------------------------------------------------------------------------------------ */  
    /* ---------------------------------------plugins 插件配置------------------------------------ */  
    /* ------------------------------------------------------------------------------------------ */  
    "plugins": [ { "name": "next" } ], // Next.js TypeScript 插件 可以处理对应的类型或特性
  },

  "include": ["src"], // 指定编译器需要包含的文件或目录
}



